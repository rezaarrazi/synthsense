services:
  postgres:
    image: postgres:15-alpine
    container_name: synthsense-postgres
    environment:
      POSTGRES_DB: synthsense
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - synthsense-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: synthsense-backend
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:password@postgres:5432/synthsense
      JWT_SECRET: your-secret-key-change-in-production
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      LLM_PROVIDER: ${LLM_PROVIDER:-openai}
      MODEL: ${MODEL:-gpt-4o}
      ENVIRONMENT: production
      DEBUG: false
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - synthsense-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: synthsense-frontend
    environment:
      VITE_API_URL: http://localhost:8000
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - synthsense-network

volumes:
  postgres_data:

networks:
  synthsense-network:
    driver: bridge
